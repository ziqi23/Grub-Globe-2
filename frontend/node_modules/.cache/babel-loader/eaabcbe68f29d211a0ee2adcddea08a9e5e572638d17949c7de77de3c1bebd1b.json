{"ast":null,"code":"import jwtFetch from './jwt';\nimport { RECEIVE_USER_LOGOUT } from './session';\nconst RECEIVE_TWEETS = \"tweets/RECEIVE_TWEETS\";\nconst RECEIVE_USER_TWEETS = \"tweets/RECEIVE_USER_TWEETS\";\nconst RECEIVE_NEW_TWEET = \"tweets/RECEIVE_NEW_TWEET\";\nconst RECEIVE_TWEET_ERRORS = \"tweets/RECEIVE_TWEET_ERRORS\";\nconst CLEAR_TWEET_ERRORS = \"tweets/CLEAR_TWEET_ERRORS\";\nconst receiveTweets = tweets => ({\n  type: RECEIVE_TWEETS,\n  tweets\n});\nconst receiveUserTweets = tweets => ({\n  type: RECEIVE_USER_TWEETS,\n  tweets\n});\nconst receiveNewTweet = tweet => ({\n  type: RECEIVE_NEW_TWEET,\n  tweet\n});\nconst receiveErrors = errors => ({\n  type: RECEIVE_TWEET_ERRORS,\n  errors\n});\nexport const clearTweetErrors = errors => ({\n  type: CLEAR_TWEET_ERRORS,\n  errors\n});\nexport const fetchTweets = () => async dispatch => {\n  try {\n    const res = await jwtFetch('/api/tweets');\n    const tweets = await res.json();\n    dispatch(receiveTweets(tweets));\n  } catch (err) {\n    const resBody = await err.json();\n    if (resBody.statusCode === 400) {\n      dispatch(receiveErrors(resBody.errors));\n    }\n  }\n};\nexport const fetchUserTweets = id => async dispatch => {\n  try {\n    const res = await jwtFetch(`/api/tweets/user/${id}`);\n    const tweets = await res.json();\n    dispatch(receiveUserTweets(tweets));\n  } catch (err) {\n    const resBody = await err.json();\n    if (resBody.statusCode === 400) {\n      return dispatch(receiveErrors(resBody.errors));\n    }\n  }\n};\nexport const composeTweet = data => async dispatch => {\n  try {\n    const res = await jwtFetch('/api/tweets/', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n    const tweet = await res.json();\n    dispatch(receiveNewTweet(tweet));\n  } catch (err) {\n    const resBody = await err.json();\n    if (resBody.statusCode === 400) {\n      return dispatch(receiveErrors(resBody.errors));\n    }\n  }\n};\nconst nullErrors = null;\nexport const tweetErrorsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : nullErrors;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case RECEIVE_TWEET_ERRORS:\n      return action.errors;\n    case RECEIVE_NEW_TWEET:\n    case CLEAR_TWEET_ERRORS:\n      return nullErrors;\n    default:\n      return state;\n  }\n};\nconst tweetsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    all: {},\n    user: {},\n    new: undefined\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case RECEIVE_TWEETS:\n      return {\n        ...state,\n        all: action.tweets,\n        new: undefined\n      };\n    case RECEIVE_USER_TWEETS:\n      return {\n        ...state,\n        user: action.tweets,\n        new: undefined\n      };\n    case RECEIVE_NEW_TWEET:\n      return {\n        ...state,\n        new: action.tweet\n      };\n    case RECEIVE_USER_LOGOUT:\n      return {\n        ...state,\n        user: {},\n        new: undefined\n      };\n    default:\n      return state;\n  }\n};\nexport default tweetsReducer;","map":{"version":3,"names":["jwtFetch","RECEIVE_USER_LOGOUT","RECEIVE_TWEETS","RECEIVE_USER_TWEETS","RECEIVE_NEW_TWEET","RECEIVE_TWEET_ERRORS","CLEAR_TWEET_ERRORS","receiveTweets","tweets","type","receiveUserTweets","receiveNewTweet","tweet","receiveErrors","errors","clearTweetErrors","fetchTweets","dispatch","res","json","err","resBody","statusCode","fetchUserTweets","id","composeTweet","data","method","body","JSON","stringify","nullErrors","tweetErrorsReducer","state","arguments","length","undefined","action","tweetsReducer","all","user","new"],"sources":["/Users/ziqizou/Desktop/Grub Globe/frontend/src/store/tweets.js"],"sourcesContent":["import jwtFetch from './jwt';\nimport { RECEIVE_USER_LOGOUT } from './session';\n\nconst RECEIVE_TWEETS = \"tweets/RECEIVE_TWEETS\";\nconst RECEIVE_USER_TWEETS = \"tweets/RECEIVE_USER_TWEETS\";\nconst RECEIVE_NEW_TWEET = \"tweets/RECEIVE_NEW_TWEET\";\nconst RECEIVE_TWEET_ERRORS = \"tweets/RECEIVE_TWEET_ERRORS\";\nconst CLEAR_TWEET_ERRORS = \"tweets/CLEAR_TWEET_ERRORS\";\n\nconst receiveTweets = tweets => ({\n  type: RECEIVE_TWEETS,\n  tweets\n});\n\nconst receiveUserTweets = tweets => ({\n  type: RECEIVE_USER_TWEETS,\n  tweets\n});\n\nconst receiveNewTweet = tweet => ({\n  type: RECEIVE_NEW_TWEET,\n  tweet\n});\n\nconst receiveErrors = errors => ({\n  type: RECEIVE_TWEET_ERRORS,\n  errors\n});\n\nexport const clearTweetErrors = errors => ({\n    type: CLEAR_TWEET_ERRORS,\n    errors\n});\n\nexport const fetchTweets = () => async dispatch => {\n    try {\n      const res = await jwtFetch ('/api/tweets');\n      const tweets = await res.json();\n      dispatch(receiveTweets(tweets));\n    } catch (err) {\n      const resBody = await err.json();\n      if (resBody.statusCode === 400) {\n        dispatch(receiveErrors(resBody.errors));\n      }\n    }\n  };\n  \n  export const fetchUserTweets = id => async dispatch => {\n    try {\n      const res = await jwtFetch(`/api/tweets/user/${id}`);\n      const tweets = await res.json();\n      dispatch(receiveUserTweets(tweets));\n    } catch(err) {\n      const resBody = await err.json();\n      if (resBody.statusCode === 400) {\n        return dispatch(receiveErrors(resBody.errors));\n      }\n    }\n  };\n  \n  export const composeTweet = data => async dispatch => {\n    try {\n      const res = await jwtFetch('/api/tweets/', {\n        method: 'POST',\n        body: JSON.stringify(data)\n      });\n      const tweet = await res.json();\n      dispatch(receiveNewTweet(tweet));\n    } catch(err) {\n      const resBody = await err.json();\n      if (resBody.statusCode === 400) {\n        return dispatch(receiveErrors(resBody.errors));\n      }\n    }\n  };\n\nconst nullErrors = null;\n\nexport const tweetErrorsReducer = (state = nullErrors, action) => {\n  switch(action.type) {\n    case RECEIVE_TWEET_ERRORS:\n      return action.errors;\n    case RECEIVE_NEW_TWEET:\n    case CLEAR_TWEET_ERRORS:\n      return nullErrors;\n    default:\n      return state;\n  }\n};\n\n\nconst tweetsReducer = (state = { all: {}, user: {}, new: undefined }, action) => {\n    switch(action.type) {\n      case RECEIVE_TWEETS:\n        return { ...state, all: action.tweets, new: undefined};\n      case RECEIVE_USER_TWEETS:\n        return { ...state, user: action.tweets, new: undefined};\n      case RECEIVE_NEW_TWEET:\n        return { ...state, new: action.tweet};\n      case RECEIVE_USER_LOGOUT:\n        return { ...state, user: {}, new: undefined }\n      default:\n        return state;\n    }\n  };\n  \n  export default tweetsReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}