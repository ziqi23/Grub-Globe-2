{"ast":null,"code":"import jwtFetch from './jwt';\nconst RECEIVE_CURRENT_USER = \"session/RECEIVE_CURRENT_USER\";\nconst RECEIVE_SESSION_ERRORS = \"session/RECEIVE_SESSION_ERRORS\";\nconst CLEAR_SESSION_ERRORS = \"session/CLEAR_SESSION_ERRORS\";\nexport const RECEIVE_USER_LOGOUT = \"session/RECEIVE_USER_LOGOUT\";\nconst receiveCurrentUser = currentUser => ({\n  type: RECEIVE_CURRENT_USER,\n  currentUser\n});\nconst receiveErrors = errors => ({\n  type: RECEIVE_SESSION_ERRORS,\n  errors\n});\nconst logoutUser = () => ({\n  type: RECEIVE_USER_LOGOUT\n});\nexport const clearSessionErrors = () => ({\n  type: CLEAR_SESSION_ERRORS\n});\nexport const signup = user => startSession(user, 'api/users/register');\nexport const login = user => startSession(user, 'api/users/login');\nconst startSession = (userInfo, route) => async dispatch => {\n  try {\n    const res = await jwtFetch(route, {\n      method: \"POST\",\n      body: JSON.stringify(userInfo)\n    });\n    const {\n      user,\n      token\n    } = await res.json();\n    localStorage.setItem('jwtToken', token);\n    return dispatch(receiveCurrentUser(user));\n  } catch (err) {\n    const res = await err.json();\n    if (res.statusCode === 400) {\n      return dispatch(receiveErrors(res.errors));\n    }\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('jwtToken');\n  dispatch(logoutUser());\n};\nconst initialState = {\n  user: undefined\n};\nconst sessionReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case RECEIVE_CURRENT_USER:\n      return {\n        user: action.currentUser\n      };\n    case RECEIVE_USER_LOGOUT:\n      return initialState;\n    default:\n      return state;\n  }\n};\nexport default sessionReducer;","map":{"version":3,"names":["jwtFetch","RECEIVE_CURRENT_USER","RECEIVE_SESSION_ERRORS","CLEAR_SESSION_ERRORS","RECEIVE_USER_LOGOUT","receiveCurrentUser","currentUser","type","receiveErrors","errors","logoutUser","clearSessionErrors","signup","user","startSession","login","userInfo","route","dispatch","res","method","body","JSON","stringify","token","json","localStorage","setItem","err","statusCode","logout","removeItem","initialState","undefined","sessionReducer","state","arguments","length","action"],"sources":["/Users/ziqizou/Desktop/mern-twitter/frontend/src/store/session.js"],"sourcesContent":["import jwtFetch from './jwt';\n\nconst RECEIVE_CURRENT_USER = \"session/RECEIVE_CURRENT_USER\";\nconst RECEIVE_SESSION_ERRORS = \"session/RECEIVE_SESSION_ERRORS\";\nconst CLEAR_SESSION_ERRORS = \"session/CLEAR_SESSION_ERRORS\";\nexport const RECEIVE_USER_LOGOUT = \"session/RECEIVE_USER_LOGOUT\";\n\nconst receiveCurrentUser = currentUser => ({\n  type: RECEIVE_CURRENT_USER,\n  currentUser\n});\n  \nconst receiveErrors = errors => ({\n  type: RECEIVE_SESSION_ERRORS,\n  errors\n});\n\nconst logoutUser = () => ({\n  type: RECEIVE_USER_LOGOUT\n});\n\nexport const clearSessionErrors = () => ({\n  type: CLEAR_SESSION_ERRORS\n});\n\nexport const signup = user => startSession(user, 'api/users/register');\nexport const login = user => startSession(user, 'api/users/login');\n\nconst startSession = (userInfo, route) => async dispatch => {\n  try {  \n    const res = await jwtFetch(route, {\n      method: \"POST\",\n      body: JSON.stringify(userInfo)\n    });\n    const { user, token } = await res.json();\n    localStorage.setItem('jwtToken', token);\n    return dispatch(receiveCurrentUser(user));\n  } catch(err) {\n    const res = await err.json();\n    if (res.statusCode === 400) {\n      return dispatch(receiveErrors(res.errors));\n    }\n  }\n};\n\nexport const logout = () => dispatch => {\n    localStorage.removeItem('jwtToken');\n    dispatch(logoutUser());\n  };\n\n  const initialState = {\n    user: undefined\n  };\n  \nconst sessionReducer = (state = initialState, action) => {\nswitch (action.type) {\n    case RECEIVE_CURRENT_USER:\n    return { user: action.currentUser };\n    case RECEIVE_USER_LOGOUT:\n    return initialState;\n    default:\n    return state;\n}\n};\n\nexport default sessionReducer;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,OAAO;AAE5B,MAAMC,oBAAoB,GAAG,8BAA8B;AAC3D,MAAMC,sBAAsB,GAAG,gCAAgC;AAC/D,MAAMC,oBAAoB,GAAG,8BAA8B;AAC3D,OAAO,MAAMC,mBAAmB,GAAG,6BAA6B;AAEhE,MAAMC,kBAAkB,GAAGC,WAAW,KAAK;EACzCC,IAAI,EAAEN,oBAAoB;EAC1BK;AACF,CAAC,CAAC;AAEF,MAAME,aAAa,GAAGC,MAAM,KAAK;EAC/BF,IAAI,EAAEL,sBAAsB;EAC5BO;AACF,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAGA,CAAA,MAAO;EACxBH,IAAI,EAAEH;AACR,CAAC,CAAC;AAEF,OAAO,MAAMO,kBAAkB,GAAGA,CAAA,MAAO;EACvCJ,IAAI,EAAEJ;AACR,CAAC,CAAC;AAEF,OAAO,MAAMS,MAAM,GAAGC,IAAI,IAAIC,YAAY,CAACD,IAAI,EAAE,oBAAoB,CAAC;AACtE,OAAO,MAAME,KAAK,GAAGF,IAAI,IAAIC,YAAY,CAACD,IAAI,EAAE,iBAAiB,CAAC;AAElE,MAAMC,YAAY,GAAGA,CAACE,QAAQ,EAAEC,KAAK,KAAK,MAAMC,QAAQ,IAAI;EAC1D,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMnB,QAAQ,CAACiB,KAAK,EAAE;MAChCG,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;IAC/B,CAAC,CAAC;IACF,MAAM;MAAEH,IAAI;MAAEW;IAAM,CAAC,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;IACxCC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEH,KAAK,CAAC;IACvC,OAAON,QAAQ,CAACb,kBAAkB,CAACQ,IAAI,CAAC,CAAC;EAC3C,CAAC,CAAC,OAAMe,GAAG,EAAE;IACX,MAAMT,GAAG,GAAG,MAAMS,GAAG,CAACH,IAAI,CAAC,CAAC;IAC5B,IAAIN,GAAG,CAACU,UAAU,KAAK,GAAG,EAAE;MAC1B,OAAOX,QAAQ,CAACV,aAAa,CAACW,GAAG,CAACV,MAAM,CAAC,CAAC;IAC5C;EACF;AACF,CAAC;AAED,OAAO,MAAMqB,MAAM,GAAGA,CAAA,KAAMZ,QAAQ,IAAI;EACpCQ,YAAY,CAACK,UAAU,CAAC,UAAU,CAAC;EACnCb,QAAQ,CAACR,UAAU,CAAC,CAAC,CAAC;AACxB,CAAC;AAED,MAAMsB,YAAY,GAAG;EACnBnB,IAAI,EAAEoB;AACR,CAAC;AAEH,MAAMC,cAAc,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAGJ,YAAY;EAAA,IAAEM,MAAM,GAAAF,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAH,SAAA;EACpD,QAAQK,MAAM,CAAC/B,IAAI;IACf,KAAKN,oBAAoB;MACzB,OAAO;QAAEY,IAAI,EAAEyB,MAAM,CAAChC;MAAY,CAAC;IACnC,KAAKF,mBAAmB;MACxB,OAAO4B,YAAY;IACnB;MACA,OAAOG,KAAK;EAChB;AACA,CAAC;AAED,eAAeD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}